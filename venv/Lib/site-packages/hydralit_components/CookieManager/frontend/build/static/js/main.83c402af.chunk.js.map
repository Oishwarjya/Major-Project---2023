{"version":3,"sources":["CookieManager.jsx","index.jsx"],"names":["CookieManager","state","componentDidMount","Streamlit","setComponentReady","Cookies","args","props","method","cookie","value","kkey","expires_at","output","setCookie","getCookie","getAllCookies","deleteCookie","setComponentValue","render","cookies","set","path","samesite","expires","Date","remove","getAll","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"yMAYMA,E,4MACJC,MAAQ,G,EACRC,kBAAoB,WAClBC,IAAUC,oBAEV,EAAKH,MAAL,QAAuB,IAAII,IAE3B,IAAQC,EAAS,EAAKC,MAAdD,KAEFE,EAASF,EAAI,OACbG,EAASH,EAAI,OACbI,EAAQJ,EAAI,MACZK,EAAOL,EAAI,IACXM,EAAaN,EAAI,WAEvB,EAAKK,KAAOA,EAEZ,IAAIE,EAAS,KAEb,OAAQL,GACN,IAAK,MACHK,EAAS,EAAKC,UAAUL,EAAQC,EAAOE,GACvC,MACF,IAAK,MACHC,EAAS,EAAKE,UAAUN,GACxB,MACF,IAAK,SACHI,EAAS,EAAKG,gBACd,MACF,IAAK,SACHH,EAAS,EAAKI,aAAaR,GAM/BN,IAAUe,kBAAkBL,I,EAK9BM,OAAS,WACP,OAAO,uBAAU,EAAKR,O,EAGxBG,UAAY,SAACL,EAAQC,EAAOE,GAG1B,OAFoB,EAAKX,MAAjBmB,QACAC,IAAIZ,EAAQC,EAAO,CAAEY,KAAM,IAAKC,SAAU,SAAUC,QAAS,IAAIC,KAAKb,MACvE,G,EAGTG,UAAY,SAACN,GAGX,OAFoB,EAAKR,MAAjBmB,QACcA,QAAQX,I,EAIhCQ,aAAe,SAACR,GAGd,OAFoB,EAAKR,MAAjBmB,QACAM,OAAOjB,EAAQ,CAAEa,KAAM,IAAKC,SAAU,YACvC,G,EAGTP,cAAgB,WAEd,OADoB,EAAKf,MAAjBmB,QACOO,U,YAjESC,KAqEbC,cAAwB7B,GC7EvC8B,IAASX,OACP,cAAC,IAAMY,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.83c402af.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React from 'react'\n\nimport Cookies from 'universal-cookie';\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass CookieManager extends StreamlitComponentBase<State> {\n  state = {}\n  componentDidMount = ()=>{\n    Streamlit.setComponentReady()\n  \n    this.state['cookies']= new Cookies(); \n    \n    const { args } = this.props\n\n    const method = args[\"method\"]\n    const cookie = args[\"cookie\"]\n    const value = args[\"value\"]\n    const kkey = args[\"key\"]\n    const expires_at = args[\"expires_at\"]\n\n    this.kkey = kkey;\n\n    let output = null\n\n    switch (method) {\n      case \"set\":\n        output = this.setCookie(cookie, value, expires_at)\n        break\n      case \"get\":\n        output = this.getCookie(cookie)\n        break\n      case \"getAll\":\n        output = this.getAllCookies()\n        break\n      case \"delete\":\n        output = this.deleteCookie(cookie)\n        break\n      default:\n        break\n    }\n\n    Streamlit.setComponentValue(output)\n  }\n\n\n\n  render = () => {\n    return <div key={this.kkey}></div>\n  }\n\n  setCookie = (cookie, value, expires_at) => {\n    const { cookies } = this.state\n    cookies.set(cookie, value, { path: \"/\", samesite: \"strict\", expires: new Date(expires_at) })\n    return true\n  }\n\n  getCookie = (cookie) => {\n    const { cookies } = this.state\n    const value = cookies.cookies[cookie]\n    return value\n  }\n\n  deleteCookie = (cookie) => {\n    const { cookies } = this.state\n    cookies.remove(cookie, { path: \"/\", samesite: \"strict\" })\n    return true\n  }\n\n  getAllCookies = () => {\n    const { cookies } = this.state\n    return cookies.getAll()\n  }\n}\n\nexport default withStreamlitConnection(CookieManager)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CookieManager from \"./CookieManager\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookieManager />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}